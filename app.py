import streamlit as st
import openai

# Clave API (us√° secrets o colocala directamente ac√° para pruebas)
openai.api_key = st.secrets["OPENAI_API_KEY"]

st.title("CodeStudy AI üß†")
st.markdown("Generador de explicaciones, ejercicios y desaf√≠os personalizados para aprender programaci√≥n con IA.")

lenguaje = st.selectbox("Lenguaje de programaci√≥n", ["Python", "JavaScript", "Java", "C#", "C++"])
tipo_ayuda = st.selectbox("Tipo de ayuda", ["Explicaci√≥n", "Ejercicio", "Desaf√≠o pr√°ctico"])
nivel = st.selectbox("Nivel del usuario", ["Principiante", "Intermedio", "Avanzado"])
tema = st.text_input("Tema o concepto a estudiar", placeholder="Ej: Arrays, funciones, promesas...")

if st.button("Generar contenido con IA"):
    if not tema.strip():
        st.warning("Por favor, escrib√≠ un tema.")
    else:
        with st.spinner("Generando... ‚è≥"):
            prompt = (
                f"Actu√° como un tutor experto en programaci√≥n. Explic√° de forma clara y sencilla el siguiente concepto: {tema}. "
                f"Nivel del usuario: {nivel}. "
                f"Lenguaje de programaci√≥n: {lenguaje}. "
                f"Tu respuesta debe ser did√°ctica, contener ejemplos y estar enfocada en que el estudiante entienda el tema f√°cilmente. "
                f"Si se pidi√≥ un ejercicio o desaf√≠o, crealo con enunciado y soluci√≥n explicada."
            )

            try:
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.7,
                    max_tokens=1000,
                )
                output = response.choices[0].message.content
                st.markdown("### ‚ú® Resultado:")
                st.write(output)
            except Exception as e:
                st.error(f"Error al consultar la API: {e}")
